#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER   1
#define UPPER   2

/ {
    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R                       &kp T        &kp Y                  &kp U            &kp I                &kp O    &kp P     &kp EQUAL
&mt RCTRL ESCAPE  &kp A  &kp S  &kp D     &kp F                       &kp G        &kp H                  &kp J            &kp K                &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V                       &kp B        &kp N                  &kp M            &kp COMMA            &kp DOT  &kp FSLH  &kp MINUS
                                &kp LGUI  &lt 2 RC(LEFT_PARENTHESIS)  &kp SPACE    &mt LEFT_SHIFT RETURN  &lt 1 BACKSPACE  &mt LEFT_ALT DELETE
            >;
        };

        Number {
            bindings = <
&none  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &none  &none     &none     &none   &none      &none
&none  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none
&none  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &none  &none     &none     &none   &none      &none
                          &kp DOT  &kp N0  &kp MINUS    &none  &none     &none
            >;
        };

        Symbol {
            bindings = <
&kp GRAVE  &kp LEFT_BRACE  &kp AMPS    &kp ASTRK    &kp LPAR   &kp RBRC     &bt BT_SEL 0  &none                 &none                  &none           &kp PIPE         &bt BT_CLR_ALL
&none      &kp COLON       &kp DOLLAR  &kp PERCENT  &kp CARET  &kp PLUS     &none         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &none
&none      &kp TILDE       &kp EXCL    &kp AT       &kp HASH   &kp PIPE     &none         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none           &none            &none
                                       &kp LPAR     &kp RPAR   &kp MINUS    &none         &none                 &none
            >;
        };
    };
};
